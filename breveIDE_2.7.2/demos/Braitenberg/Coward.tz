#
# A "Braitenberg Vehicle" is a simple simulated robot with wheels and
# sensors.  The most simple Braitenberg vehicles have sensors connected
# directly to the motors so that sensory input (for example, light)
# causes the wheels to turn.  By changing the position of the sensors,
# the positions of the wheels, and the connections between them, a
# number of "life-like" behaviors can be simulated.
#
# The "Coward" is a vehicle with two sensors and two wheels, connected
# in directly: left sensor to left wheel, right sensor to right wheel.  
# This means that light shining on the left sensor activates the left 
# wheel; light on the right sensor activates the right wheel.  The result 
# is that when the vehicle comes close to the lights, it will turn away
# like a coward.
#
# Run the simulation, and use the arrow tool to grab the red lights and
# move them around the world, to see how the vehicle reacts.  You can 
# also build your own Braitenberg simulations by using the 
# BraitenbergTemplate file (included with the demos).  
#

@use Braitenberg.

Controller myBraitenbergControl.

BraitenbergControl : myBraitenbergControl {
	+ variables:
		vehicle (object).
		leftSensor, rightSensor (object).
		leftWheel, rightWheel (object).
		n (int).

	+ to init:
		for n=0, n<10, n++:
			new BraitenbergLight move to (20 * sin(n * 6.28 / 10), 1, 20 * cos(n * 6.28 / 10)).

		vehicle = new BraitenbergVehicle.
		self watch item vehicle.

		vehicle move to (0, 2, 14).

		leftWheel = (vehicle add-wheel at (-.5, 0, 1.5)).
		rightWheel = (vehicle add-wheel at (-.5, 0, -1.5)).

		rightSensor = (vehicle add-sensor at (2.0, .4, -1.5)).
		leftSensor = (vehicle add-sensor at (2.0, .4, 1.5)).
		leftSensor link to leftWheel.
		rightSensor link to rightWheel.

		leftSensor set-bias to 15.
		rightSensor set-bias to 15.
}
