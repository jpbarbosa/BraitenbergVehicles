# 
# PatchLife -- Game of Life simulation
# jon klein <jk@spiderland.org>
#
# This demos uses patches to implement Conway's "Game of Life" in 3D
# This file demonstrates how patches can be used to partition space into 
# smaller areas.  These patches can be used to implement cellular automata 
# (as in this simulation), or to associate certain areas of space with 
# different values (like temperature, or chemical concentrations).
# 

@include "Control.tz"
@include "PatchGrid.tz"
@include "Patch.tz"
@include "Wanderer.tz"

Controller PatchLife.

@define X_SIZE 20.
@define Y_SIZE 20.
@define Z_SIZE 20.

Control : PatchLife {
	+ variables:
		patches (object).

	+ to init:
		patches = ( new PatchToroid init-with x-count X_SIZE y-count Y_SIZE z-count Z_SIZE location ( 0, 0, 0 ) patch-size ( 1, 1, 1 ) patch-class "LifePatch" ).

		patches disable-volumetric-drawing.

		# since we're using patches with discrete timesteps, we can set the 
		# timescale to 1.0 for each iteration.  because the patches update
		# once for each iterate method, these timesteps have no real effect
		# on the speed of the simulation -- the change only affects the 
		# "accounting" of the simulation.

		self set-integration-step to 1.0.
		self set-iteration-step to 1.0.

		self set-background-color to (0, 0, 0).

	+ to catch-key-r-down:
		self randomize.

	+ to catch-key-c-down:
		self clear.

	+ to clear:
		patch (object).
		patchList (list).

		patchList = (patches get-patches).
		foreach patch in patchList: patch set-state to 0.

	+ to randomize:
		patch (object).
		patchList (list).
	
		patchList = (patches get-patches).
		foreach patch in patchList: patch set-state to random[1].
}

Patch : LifePatch {
	+ variables:
		state (int).
		neighbors (list).
		onCount (int).
		liveNeighbors (int).

	+ to get-state:
		return state.

	+ to set-state to value (int):
		self set-color to (1.0, 0, 0).
		state = value.

		if state: self set-transparency to 0.2.
		else self set-transparency to 0.0.

	+ to init-patch:
		if random[5] == 0: self set-state to 1.
		else self set-state to 0.

		neighbors = (self get-3d-moore-neighborhood).

	+ to increment-neighbor-count:
		liveNeighbors++.

	+ to iterate:
		if state: neighbors increment-neighbor-count.

	+ to post-iterate:
		if (state == 0 && liveNeighbors == 4) || ((state == 1) && (liveNeighbors == 4 || liveNeighbors == 6)): {
			self set-transparency to 0.2.
			state = 1.

			self set-color to (1.0 - (onCount / 20.0), onCount / 20.0, 0).
		} else {
			self set-transparency to 0.0.
			state = 0.
			onCount = 0.
		}

		onCount++.
		liveNeighbors = 0.
}
