# 
# PatchLife -- Game of Life simulation
# jon klein <jk@spiderland.org>
#
# This demos uses patches to implement Conway's classic "Game of Life" 
# simulation.  This file demonstrates how patches can be used to partition 
# space into smaller areas.  These patches can be used to implement cellular
# automata (as in this simulation), or to associate certain areas of space 
# with different values (like temperature, or chemical concentrations).
#
# When the simulation is running, the following keys can control the state
# of the simulation:
# 	C -- clear all the cells and set their states to "off"
#   R -- randomize the states of all of the cells
#   G -- make a glider, a pattern of cells which moves itself over the grid
# 

@include "Control.tz"
@include "PatchGrid.tz"
@include "Patch.tz"
@include "Wanderer.tz"

Controller PatchLife.

@define X_SIZE 40.
@define Y_SIZE 40.
@define Z_SIZE 1.

Control : PatchLife {
	+ variables:
		patches (object).

	+ to init:
		patches = (new PatchToroid init-with x-count X_SIZE y-count Y_SIZE z-count Z_SIZE location (0, 0, 0) patch-size (.5, .5, .5) patch-class "LifePatch").

		# since we're using patches with discrete timesteps, we can set the 
		# timescale to 1.0 for each iteration.  because the patches update
		# once for each iterate method, these timesteps have no real effect
		# on the speed of the simulation -- the change only affects the 
		# "accounting" of the simulation.

		self set-integration-step to 1.0.
		self set-iteration-step to 1.0.

		self set-background-color to (0, 0, 0).

	+ to catch-key-r-down:
		self randomize.

	+ to catch-key-g-down:
		self make-glider.

	+ to catch-key-c-down:
		self clear.

	+ to clear:
		patch (object).
		patchList (list).

		patchList = (patches get-patches).
		foreach patch in patchList: patch set-state to 0.

	+ to make-glider:
		(patches get-patch-at x X_SIZE - 3 y 1 z 0) set-state to 1.
		(patches get-patch-at x X_SIZE - 3 y 2 z 0) set-state to 1.
		(patches get-patch-at x X_SIZE - 3 y 3 z 0) set-state to 1.
		(patches get-patch-at x X_SIZE - 2 y 3 z 0) set-state to 1.
		(patches get-patch-at x X_SIZE - 1 y 1 z 0) set-state to 1.

	+ to randomize:
		patch (object).
		patchList (list).
	
		patchList = (patches get-patches).
		foreach patch in patchList: patch set-state to random[1].
}

Patch : LifePatch {
	+ variables:
		state (int).
		neighbors (list).
		onCount (int).
		liveNeighbors (int).

	+ to get-state:
		return state.

	+ to set-state to value (int):
		self set-color to (1.0, 0, 0).
		state = value.

		if state: self set-transparency to 0.7.
		else self set-transparency to 0.0.

	+ to init-patch:
		self set-state to random[1].

		neighbors = (self get-moore-neighborhood).

    + to increment-neighbor-count:
		# a neighbor is telling us that it's alive
		liveNeighbors++.

    + to iterate:
		# if we're alive, tell our neighbors about it.

		if state: neighbors increment-neighbor-count.
		

    + to post-iterate:
		# all of our live neighbors have reported now -- compute the new state

		if (liveNeighbors == 3) || ((state == 1) && (liveNeighbors == 2)): {
			self set-transparency to 0.5.
			state = 1.

			onCount++.

			self set-color to (1.0 - (onCount / 20.0), onCount / 20.0, 0).
		} else {
			self set-transparency to 0.0.
			state = 0.
			onCount = 0.
		}

		# reset the neighbor counter for the next iteration

		liveNeighbors = 0.
}
