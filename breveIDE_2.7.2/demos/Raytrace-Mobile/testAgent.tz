@define CRUISE 1.
@define STANDANDSEND 2.
@define TURNLEFT 3.
@define TURNRIGHT 4.
@define STRAIGHT 5.
@define SOURCE 6.
@define SINK 7.
@define TEST 8.
@define AVOID 9.
@define INSIDETEST 10.
@define DISABLE 11.

@define DISTANCE 20.
@define AZIMUT 21.
@define INCIDENCE 22.
@define STAND 23.
@define SHOWSENSORS 24.

@use basicAgent.

# this is a agent mainly for testing the infrared sensor simulation
# if you set the mode to AVOID it does a simple obstacle avoidance
# use Raytracer3.tz moveAroundTest to see it
#

basicAgent : testAgent (aka testAgents) {
	+ variables:
		df, dlf, drf    (float).
		draw (object).
		mode(int).
		time(float).
		incidenceRadius(float).

	+ to set-mode mode mod(int):
		mode = mod.

	+ to set-incidenceRadius radius r(float):
		incidenceRadius = r.

	# if we receive a message we become grey and stop
	+ to receiveMessage message message(string) mySensor mySensor(int) :
		if(mode == DISABLE):{
			return.
		}
		self set-color to (0.5, 0.5, 0.5).
		mode = DISABLE.

	+ to init:
		draw = new Drawing.
		mode = STRAIGHT.
		time = -1.
		draw set-color to (1, 1, 1).
		return self.
		
# here comes the behaviour
	+ to iterate:
		dir (vector).
		d(float).
		vtest (double).
		vtest = vtest+10.
		dir = (self get-rotation)*(1,0,0).
		dir = dir * 30.
		#draw draw-line from (self get-location)to (self get-location)+dir.

		if(mode == DISABLE):{
			self set-rotational-velocity to (0, 0, 0).
			self set-velocity to (0,0,0).		
			return.
		}
		if(mode == STRAIGHT):{
			self set-rotational-velocity to (0, 0, 0).
			self set-velocity to (self get-rotation)*(1,0,0).		
			return.
		}
		if(mode == SOURCE):{
			#send message "source" on-sensor random[6].

			self send message "source0" on-sensor 0.
			self send message "source1" on-sensor 1.
			self send message "source2" on-sensor 2.
			self send message "source3" on-sensor 3.
			self send message "source4" on-sensor 4.
			self send message "source5" on-sensor 5.
			return.
		}
		if(mode == SINK):{
			self set-rotational-velocity to (0, 0, 0).
			self set-velocity to (0,0,0).		
			return.
		}
		
		if(mode == SHOWSENSORS):{
			df  = (sensors{0} get-data).
			df  = (sensors{1} get-data).
			df  = (sensors{2} get-data).
			df  = (sensors{3} get-data).
			df  = (sensors{4} get-data).
			df  = (sensors{5} get-data).
			return.
		}

		if(mode== AVOID):{
			df  = (sensors{1} get-data).
			dlf = (sensors{0} get-data).
			drf = (sensors{2} get-data).
#			print "avoid: front:", df.
			if ((df < 40)&&(dlf < 20)&&(drf < 20) ):{
				self set-rotational-velocity to (0, 0, 0).
				self set-velocity to (self get-rotation)*(1,0,0).
				return.
			}
			if (dlf > drf) : {
				mode = TURNRIGHT.
			} else {
				mode = TURNLEFT.
			}
			return.
		}

		if(mode== INSIDETEST):{
			df  = (sensors{1} get-data).
			self send message "test" on-sensor 1.
			self set-velocity to (self get-rotation)*(1,0,0).
			return.
		}
		
		if(mode==TURNLEFT):{
			df  = (sensors{1} get-data).
			self set-rotational-velocity to (0, 1, 0).
				self set-velocity to (self get-rotation)*(0.1,0,0).
			if(df < 15):{mode=AVOID.}
			return.
		}
		
		if(mode==TURNRIGHT):{
			df  = (sensors{1} get-data).
			self set-rotational-velocity to (0, -1, 0).
				self set-velocity to (self get-rotation)*(0.1,0,0).
			if(df < 15):{mode=AVOID.}
			return.
		}

		if(mode==CRUISE):{
			self set-rotational-velocity to (0, 0.4-random[0.8], 0).
			self set-velocity to (self get-rotation)*(1,0,0).
			return.
		}
		
		if(mode==DISTANCE):{
			df  = (sensors{1} get-data).
			d = ((sensors{1} get-location)::z) - 0.5. # wall thickness
			print d ," ",df.			
			self set-rotational-velocity to (0, 0, 0).
			self set-velocity to (self get-rotation)*(1,0,0).
			return.
		}
		
		if(mode==AZIMUT):{
			printf time.
			printf " ".
			df  = (sensors{1} get-data).
			print df.			
			time = time +1.
			self rotate around-axis (0,1,0) by time*(PI/180.0).
			self set-velocity to (0,0,0).		
			return.
		}
		
		if(mode==INCIDENCE):{
			printf time.
			printf " ".
			df  = (sensors{1} get-data).
			print df.			
			time = time +1.
			self move to (incidenceRadius*sin(time*PI/180.0), 1.4, incidenceRadius*cos(time*PI/180.0)).
			self rotate around-axis (0,1,0) by time*(PI/180.0)+PI/2.
			return.
		}
		
#	draw clear.
}


