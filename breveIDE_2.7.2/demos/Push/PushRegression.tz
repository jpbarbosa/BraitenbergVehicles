# 
# PushRegression.tz
# A simple example of using the Push programming language and associated
# genetic programming environment PushGP to solve a simple symbolic 
# regression problem.  
# 
# In symbolic regression problems, a system is provided with a dataset and 
# is challanged to find the function that created it.  The approach shown 
# here uses genetic programming in which Push programs are evolved to find
# a solution.  
#

@use PushGP.
@use Control.

Controller RegressionController.

Control : RegressionController {
	+ to init:
		new RegressionGP.
}

# 
# In order to run a PushGP experiment, we subclass the PushGP class.  
# The parent class PushGP does most of the computation, but asks us to 
# override certain methods so that we can provide information about 
# fitness cases and fitness tests.
# 

PushGP : RegressionGP {
	+ variables:
		currentInput (float).

	+ to init:
		# Set some parameters for the Push interpreter.

		self read-interpreter-config from-file "PushRegression.config".
		self set-population-size to 2000.
		self set-spatial-radius to 10.

		self read-interpreter-config from-file "PushRegression.config".
		
		interpreter print-config.

		_useChallenges = 1.


		# PushGP regression problems are helped by being able to retrieve 
		# the input values with an instruction.  Adding this callback is 
		# optional, but does tend to produce better results.

		(self get-interpreter) add-instruction 
			for-instance self 
			for-method "INPUT".

	+ to count-fitness-cases:
		# This method is implemented as instructed by the PushGP class.
		# Return the number of fitness cases to be tested.

		return 10.

	+ to setup-fitness-test for-fitness-case n (int) 
				with-interpreter interpreter (object):

		# This method is implemented as instructed by the PushGP class.
		# Push a test case input value (n) onto the float stack.  

		n += 1.

		currentInput = n.

		interpreter push-float value n.

	+ to compute-error for-fitness-case n (int) 
			with-interpreter interpreter (object):

		# This method is implemented as instructed by the PushGP class.
		# Compute the error between the program's output and our target 
		# equation.  In this case, return the absolute value of the 
		# difference.

		desiredResult (float).

		n += 1.
		
		# desiredResult = (n * n * n) + (4 * n * n) - (2 * n).
		desiredResult = (8 * n * n * n) + (3 * n * n) + (n).
		# desiredResult = ( n*n ) + 10.

		return | (interpreter get-float-stack-top) - desiredResult | * | (interpreter get-float-stack-top) - desiredResult |.

	+ to INPUT:
		# This input instruction just puts the current input value on
		# top of the float stack.

		(self get-interpreter) push-float value currentInput.
}
