@use Object.
@use Mobile.
@use Shape.
@use Drawing.
@use Real.

@define PI 3.141592653.
@define PI180 0.017453293.
@define MAXVALUE  233.

Real : IRSensor (aka IRSensors) {
	% The IRSensor class simulates a image ranger sensor, which provides a distance value 
	% for each pixel.

	+variables:
		m_location(vector). # location of the sensor
		m_rotation(matrix). # rotation of the sensor
		sensorType(string).
		sensordata(float).
		owner(object).
		realWorldPointer_owner(pointer).
		draw(object).
		rel_position(vector). # position ralativ to the owner
		rel_rotation(matrix). # rotation relativ to the owner
		communicationThreshold(float). # if the quality is higher than the threshold we can communicate


	# init with a specific sensortype and a position and rotation relativ to the owner wich is 
	# given as last parameter			
	+to init-with type t(string) rel-position position(vector) rel-rotation rotation(matrix) owner o(object):
		sensorType = t.
		self set-rel-position to position.
		self set-rel-rotation to rotation.
		owner = o.
		realWorldPointer_owner = o get-realWorldPointer.
		draw = new Drawing.
		sensordata = 0.
		self update-pos.
		communicationThreshold = 30.0.
		return self.
	

# this is called if the sensor is used to sense
# it return a value according to the sensor specifications
# and the obstacles in his neighbourhood
	+to get-data:
		self update-pos.
		# only make the calculations once per simulation step
		if (sensordata ==-1 ):{
			draw clear.
			draw set-color to (0.1, 0.1, 0.1).
			draw draw-line from (self get-location)to (self get-location) + (self get-rotation)*(0,0,30).
#			print "Raytracer: start sensing...".
			sensordata = MAXVALUE * irSense(realWorldPointer_owner, (self get-location), (self get-rotation) , sensorType).
#			print sensordata.
#			print "Raytracer: ...sensing done".
		}
		return sensordata.
		
# we use the sensor to send messages to other agents
# 
	+ to send message message(string):
  		qtest (double).
		agents (list).
		i(object).
		col(int).
		col = random[100].
  		self update-pos.
 		draw clear.
		agents = all basicAgent. # only send to other Agents
		draw set-color to (1,0,0).
		draw draw-line from (self get-location)to (self get-location) + (self get-rotation)*(0,0,27).

		foreach i in agents: {
			if(i!= owner):{
				qtest = MAXVALUE * calculateQualityToObject(realWorldPointer_owner, (self get-location), (self get-rotation) ,(i get-realWorldPointer) , sensorType).
				draw set-color to (0,0,0).
#				draw draw-line from (self get-location)to (i get-location).
# only send the message to him, if the quality is good enough
				if (qtest > communicationThreshold):{ #3
#					print "sendquality:",qtest.
					i receiveMessage2 message message from(self get-owner ).
				}
			}
		}
		
# this message is called if we receive a message
# we can only receive a message if we can send a ACK to the sender of the message
	+ to can-send-ack to agent(object):
		qtest(float).
# we dont have to make raytrace, the sender already assured a free path the quality of our 
# ACK only depends on the distance and the incidence angle
		qtest = MAXVALUE * calcQualNoRay(realWorldPointer_owner, (self get-location),
		(self get-rotation) ,(agent get-location) , sensorType).
		if (qtest > communicationThreshold):{
# the quality is good enough we could send a ACK 
			return 1.
		}
#		print "qtest ack to low!", qtest.
# the quality is not good we could not send an ACK
		return 0.

# reset the data and update position
	+to iterate:
		sensordata = -1.
		self update-pos.
		
	+to update-pos:
		# move and rotate the sensor, relative to its owner
		self move to ((owner get-location) +( (owner get-rotation )* rel_position )).
		self set-rotation to ((owner get-rotation) * rel_rotation).

##############################getters and setters################################
	+ to set-rel-y-rotation to f(float):
		self set-rel-rotation to [(cos(f),0,-sin(f)),(0,1,0),(sin(f),0,cos(f))].

	+ to set-rel-rotation to m (matrix):
	    rel_rotation = m.
	
	+to set-rel-position to v (vector):
		rel_position = v.
	
	+ to move to location(vector):
		m_location = location.
	
	+ to get-location:
	  return m_location.

	+ to set-rotation to m(matrix):
	  m_rotation = m.

	+to get-rotation:
	  return m_rotation.
	  
	+to get-sensorType:
	  return sensorType.

    + to set-owner to o (object):
        owner = o.
		
    + to get-owner:
        return owner.

}
