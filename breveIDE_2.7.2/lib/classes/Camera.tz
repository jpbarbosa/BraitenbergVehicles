@use Abstract.

Abstract : Camera (aka Cameras) [version 2.4] {
	% Summary: creates a new rendering perspective in the simulated world.
	% <P>
	% The Camera class is used to set up a viewing perspective in a simulation.
	% Creating a new camera object places a viewing area with the new camera 
	% perspective in the main viewing window.
	% <P>
	% See the OBJECT(Image) class to read data from a Camera (or from the 
	% main simulation window) into a pixel buffer.  This can be useful for
	% implementing vision algorithms.

	+ variables:
		cameraPointer (pointer).
		shared (int).

	- to set-camera-pointer to p (pointer):
		% Used internally.

		if !shared: {
			cameraFree( cameraPointer ).
		}

		cameraPointer = p.
		shared = 1.

	+ to init:
		cameraPointer = cameraNew().
		self set-size with-height 100 with-width 100.
		self set-position with-x 0 with-y 0.

  + section "Configuring the Camera"

	+ to enable-smooth-drawing:
		% Enable smooth drawing for the camera.  Smooth drawing enables
		% a smoother blending of colors, textures and lighting.  This feature
		% is especially noticeable when dealing with spheres or large objects.
		% <p>
		% The disadvantage of smooth drawing is a potential performance hit.
		% The degree of this performance hit depends on the number of polygons
		% in the scene.  If speed is an issue, it is often best to disable
		% both lighting and smooth drawing.
            
		cameraSetDrawSmooth(cameraPointer, 1).

	+ to disable-smooth-drawing:
		% Disable smooth drawing for the main camera.  
		% See METHOD(enable-smooth-drawing) for more information.

		cameraSetDrawSmooth(cameraPointer, 0).

  + section "Enabling and Disabling the Camera"

	+ to disable:
		% Disables this camera.  The view from this camera will not be 
		% updated or drawn to the viewing window. 

		cameraSetEnabled(cameraPointer, 0).

	+ to enable:
		% Enables the camera.  The view from this camera will be updated
		% and drawn to the viewing window after each iteration.
	
		cameraSetEnabled(cameraPointer, 1).

  + section "Enabling and Disabling Text in the Camera's Display"

	+ to enable-text:
		% Enables text for this camera.
		cameraTextSetEnabled(cameraPointer, 1).

	+ to disable-text:
		% Disables text for this camera.
		cameraTextSetEnabled(cameraPointer, 0).

  + section "Changing the Size, Position and Perspective of the Viewing Window"

	+ to get-width:
		% Returns the current camera width.

		return cameraGetWidth( cameraPointer ).
	
	+ to get-height:
		% Returns the current camera width.

		return cameraGetHeight( cameraPointer ).
	
	+ to set-size with-height newHeight (double) with-width newWidth (double):
		% Sets the size of the camera viewing area.

		cameraResizeDisplay(cameraPointer, newWidth, newHeight).

	+ to set-position with-x newX (double) with-y newY (double):
		% Sets the position of the camera viewing area inside the main window.

		cameraPositionDisplay(cameraPointer, newX, newY).

	+ to look at target (vector) from position (vector):
		% Moves the camera to position and aims it at target.  target is
		% is the target's location <b>relative to the camera</b>, not the
		% target's "real-world" location.

		cameraPosition(cameraPointer, position, target).

	+ to set-z-clip to distance (double):
		% Sets the Z clipping plan to theDistance.  The Z clipping plan
		% determines how far the camera can see.  A short Z clipping distance
		% means that objects far away will not be drawn.
		% <p>
		% The default value is 500.0 and this works well for most simulations,
		% so there is often no need to use this method.
		% <p>
		% Using a short Z clipping distance improves drawing quality, avoids
		% unnecessary rendering and can speed up drawing during the simulation.
		% However, it may also cause objects you would like to observe in the
		% simulation to not be drawn because they are too far away.

		cameraSetZClip(cameraPointer, distance).

	+ to get-rotation:
		% Returns a vector containing the rotation of the camera about the X- 
		% and Y-axes return cameraGetRotation(cameraPointer).
		return cameraGetRotation(cameraPointer).

	+ to set-rotation x rx (float) y ry (float):
		% Sets the rotation of the camera about the X- and Y-axes.
		cameraSetRotation(cameraPointer, rx, ry).

	- to delete:
		if cameraPointer && !shared: cameraFree(cameraPointer).
}
