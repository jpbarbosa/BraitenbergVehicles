@use Object.
@use Abstract.

Abstract : Joint (aka Joints) [version 2.3] {
	% Joint a is class used to connect two OBJECT(Mobile) objects together.  The
	% Joint class itself is actually never instantiated--instead, one of the
	% following joint subclasses should be used.
	% <ul>
	% <li>OBJECT(PrismaticJoint) for linear sliding joints between links
	% <li>OBJECT(RevoluteJoint) for rotational joints between links
	% <li>OBJECT(FixedJoint) for static joints between links
	% <li>OBJECT(BallJoint) for ball joints between links
	% <li>OBJECT(UniversalJoint) for ball joints between links
	% </ul>
	% <P>
	% Although the class itself is never instantiated, the class methods 
	% described below are often used with the object's subclasses.
	% <P>
	% The joints supported in breve can be 1, 2 or 3 degrees of freedom 
	% (DOF), meaning that they allow motion in 1, 2 or 3 independent 
	% directions.  

	+ variables:
		parent, child (object).
		plinkPoint, clinkPoint (vector).
		relativeRotation (matrix).
		jointPointer (pointer).
		strengthLimit (float).
		normalVector (vector).
		maxVector, minVector (vector).
		springMin, springMax, springStrength (float).

  + section "Getting the Objects Connected by a Joint"

	+ to get-parent:
		% Returns the object identified as the "parent" ojbect.
		return parent. 

	+ to get-child:
		% Returns the object identified as the "child" ojbect.
		return child. 

	+ to init:
		normalVector. # ditch the unused variable warning.
		relativeRotation = [ (1, 0, 0), (0, 1, 0), (0, 0, 1) ].

  + section "Setting parameters for joint springs and damping (friction)"

	+ to set-erp to erpValue (double):
		% Sets the joint's error correction parameter.  See the ODE physics engine documentation for more details.
		
		jointSetERP( jointPointer, erpValue ).
		
	+ to set-cfm to cfmValue (double):
		% Sets the joint's constraint force mixing parameter.  See the ODE physics engine documentation for more details.

		jointSetCFM( jointPointer, cfmValue ).

	+ to set-double-spring with-strength theStrength (float) with-max theMax (float) with-min theMin (float):
		% Enable this joint's spring to take effect when the rotation is above
		% theMax or below theMin.  When the position of the joint is between
		% theMin and theMax, the spring applies no force to the joint.  When
		% the position goes out of this range a force is applied according
		% to the strength of the joint (theStrength) and distance to the
		% "natural" range.
		% <p>
		% To revert to the default behavior of no spring acting on the joint,
		% use the method METHOD(remove-spring).

		if !jointPointer:
			die "attempting to set spring of uninitialized Joint object.".

		springMax = theMax.
		springMin = theMin.
		springStrength = theStrength.

		jointSetSpring(jointPointer, theStrength, theMin, theMax).

	+ to set-joint-damping to dampingValue (float):
		% Sets the joint damping--the friction of the joint.  

		jointSetDamping(jointPointer, dampingValue).

  + section "Getting and Setting the Velocity of a Joint"

	+ to set-joint-velocity to newVelocity (float):
		% Sets the joint velocity to newVelocity.

		if jointPointer: jointSetVelocity(jointPointer, (newVelocity, 0, 0)).

	+ to get-joint-velocity-vector:
		% Returns the vector velocity of the joint.  For 1-DOF joints (prismatic,
		% revolute), only the X-component is valid.  For 2-DOF joints (universal),
		% both the X- and the Y-components are used.  For a ball joint, all three
		% values are provided.

		return jointGetVelocity(jointPointer).

	+ to get-joint-velocity:
		% Returns the scalar velocity of the joint.  This is only useful for
		% 1-DOF joints (prismatic and revolute).  For higher-DOF joints, use
		% METHOD(get-joint-velocity-vector).

		return jointGetVelocity(jointPointer)::x.

  + section "Manipulating Joint Strength"

	+ to set-joint-torque-vector to torqueVector (vector):
		% Applies torque on one or more axes.  This method can be used when setting the torque
		% of ball or universal joints.

		if jointPointer: jointApplyForce(jointPointer, torqueVector).

	+ to set-strength-limit to newLimit (float):
		% Sets the maximum torque to be used by this joint when attempting 
		% to attain the target speed.

		if !jointPointer: return.

		if newLimit > (self get-strength-hard-limit): newLimit = (self get-strength-hard-limit).
		if newLimit < 0: newLimit = 0.0.

		strengthLimit = newLimit.

		jointSetMaxStrength(jointPointer, newLimit).

	+ to get-strength-limit:
		% Returns the user set strength limit of the joint.

		return strengthLimit.

	+ to set-joint-limit-vectors min minV (vector) max maxV (vector):
		% A convenience method for setting joint limits for any kind of 
		% joint.  For 1-DOF joints (prismatic, revolute) only the X
		% values from the vectors are used.  For 2-DOF joints (universal),
		% both X and Y values are used.  For 3-DOF joints, all the 
		% values are used.
		% <P>
		% Note that this method is just an alternative to the set-joint-limit
		% methods which exist in all of the joints which support limits.

		minVector = minV.
		maxVector = maxV.

		if jointPointer: jointSetLimits(jointPointer, minV, maxV).

	+ to get-max-joint-limit-vector:
		% Returns the maximum joint limit vector, if it has been set.
		return maxVector.

	+ to get-min-joint-limit-vector:
		% Returns the minimum joint limit vector, if it has been set.
		return minVector.

	+ to get-strength-hard-limit:
		% Returns the "hard" limit of the joint--the maximum torque that you
		% are allowed to put on a single joint.

		if !child: return 0.

		return (child get-mass) * 500.

	+ to get-force:
		% Returns the force applied by this joint to maintain the desired
		% relationships of the connected bodies.  In other words, the stress 
		% force on the joint.  
		% <P>
		% The forces applied to connected bodies are generally equal and 
		% opposite, so this value is computed as f1 + -f2, where f1 and f2
		% are the forces acting on the first and second bodies.

		if jointPointer: return jointGetForce(jointPointer).

	+ to get-torque:
		% Returns the torque applied by this joint to maintain the desired
		% relationships of the connected bodies.  In other words, the stress 
		% torque on the joint.
		% <P>
		% The torques applied to connected bodies are generally equal and 
		% opposite, so this value is computed as t1 + -t2, where t1 and t2
		% are the torques acting on the first and second bodies.

		if jointPointer: return jointGetTorque(jointPointer).

  + section "Getting and Setting Joint Position & Orientation"

	+ to get-child-link-point:
		% Returns the child link point.
		return clinkPoint.

	+ to get-parent-link-point:
		% Returns the child link point.
		return plinkPoint.

	+ to set-relative-rotation-matrix to newRotation (matrix):
		% To avoid undesirable "jumping" behavior, this method should be called 
		% <b>before</b> linking the joint.
		% <p>
		% Sets the relative rotation between the child and parent OBJECT(Link)
		% to newRotation.  This rotation specifies the rotation of the child
		% link when the joint is "relaxed" or at its natural position.
		% <p>
		% The method METHOD(set-relative-rotation) is somewhat easier to use,
		% since it does not require the actual rotation matrix.
		% <p>
		% Changing the relative rotation of the joint fundamentally changes
		% the way the joint works, and should not be used as a "normal"
		% joint motion:
		% the relative rotation may be changed dynamically over the course of 
		% the simulation, though it <b>may cause unexpected and unrealistic 
		% behavior</b> if the change is not made gradually, or if the bodies 
		% involved are in contact with other bodies at the time of the change.

		relativeRotation = newRotation.
		if jointPointer: jointSetLinkPoints(jointPointer, plinkPoint, clinkPoint, relativeRotation).

	+ to set-relative-rotation around-axis theAxis (vector) by theAngle (float):
		% To avoid undesirable "jumping" behavior, this method should be called 
		% <b>before</b> linking the joint.
		% <p>
		% Sets the relative rotation between the child and parent OBJECT(Link)
		% to newRotation.  This rotation specifies the rotation of the child
		% link when the joint is "relaxed" or at its natural position.
		% <p>
		% Changing the relative rotation of the joint fundamentally changes
		% the way the joint works, and should not be used as a "normal"
		% joint motion:
		% the relative rotation may be changed dynamically over the course of 
		% the simulation, though it <b>may cause unexpected and unrealistic 
		% behavior</b> if the change is not made gradually, or if the bodies 
		% involved are in contact with other bodies at the time of the change.

		relativeRotation = rotationMatrix(theAxis, theAngle).
		if jointPointer: jointSetLinkPoints(jointPointer, plinkPoint, clinkPoint, relativeRotation).

	+ to set-child-link-point to linkPoint (vector):
		% Dynamically sets the child's link point for this joint.  This method can
		% be called over the course of the simulation to change the way the joint
		% works.
		% <p>
		% If the Joint is not linked, this call has no effect.

		clinkPoint = linkPoint.
		if jointPointer: jointSetLinkPoints(jointPointer, plinkPoint, clinkPoint, relativeRotation).

	+ to set-parent-link-point to linkPoint (vector):
		% Dynamically sets the parent's link point for this joint.  This method can
		% be called over the course of the simulation to change the way the joint
		% works.
		% <p>
		% If the Joint is not linked, this call has no effect.

		plinkPoint = linkPoint.
		if jointPointer: jointSetLinkPoints(jointPointer, plinkPoint, clinkPoint, relativeRotation).

	+ to set-joint-normal to normal (vector):
		% If this type of joint supports it this method sets the 
		% normal vector for the motion for the joint.  The precise meaning 
		% of the normal vector depends on the exact type of joint.  See each
		% joint's link method documentation for more details.

		normalVector = normal.

		if jointPointer: jointSetNormal(jointPointer, normalVector).
	
	+ to get-joint-normal:
		% Returns the joint's normal vector.

		return normalVector.

	+ to dearchive:
		if jointPointer: {
			self set-strength-limit to strengthLimit.
			self set-double-spring with-strength springStrength with-max springMax with-min springMin.
		}

		return 1.

  + section "Breaking Joints"

	- to break:
		% Deprecated -- use break-joint.
		self break-joint.

	+ to break-joint:
		% Breaks this joint--removes the child (and all of the links connected to it)
		% from the body.  The child link (and its descendents) are therefore removed 
		% from the world and placed in limbo.  They may be reconnected later by 
		% creating another Joint, or it may be associated with a OBJECT(MultiBody) of 
		% its own.
		% <P>
		% The Joint object is <b>not</b> freed&mdash;this has been changed from breve
		% 1.7.  By calling this method, you break the joint without releasing it such
		% that it can be used again.  If you do not with to use the Joint object again,
		% then simply freeing the Joint object will break the joint and delete the object.

		self disable-automatic-joint-scaling.

		if jointPointer: jointBreak(jointPointer).
		jointPointer = 0.

  + section "Automatic Joint Scaling"

	+ to enable-automatic-joint-scaling:
		% Tracks changes to sizes in the link shapes, and automatically "scales" the 
		% joint (more accurately, the link points) such that the resized links will
		% maintain the same relative distance from one another.  This feature is likely
		% to be desirable whenever "growth" of OBJECT(MultiBody) objects is simulated.
		% <P>
		% This can be later disabled using METHOD(disable-automatic-joint-scaling).

		self disable-automatic-joint-scaling.

		if parent: self observe instance (parent get-shape) for-notification "size-changed" with-method "rescale-parent-link-point".

		self observe instance (child get-shape) for-notification "size-changed" with-method "rescale-child-link-point".

	+ to disable-automatic-joint-scaling:
		% Disables automatic joint scaling, if it had previously been enabled using
		% METHOD(enable-automatic-joint-scaling).

		if parent: self unobserve instance (parent get-shape) for-notification "size-changed".
		if child: self unobserve instance (child get-shape) for-notification "size-changed".

	- to enable-children-reposition: 
		jointSetRepositionAll(jointPointer, 1).

	- to rescale-parent-link-point:
		% Used internally to rescale link points when joint scaling is enabled.

		scale (vector).

		if !parent: return.

		scale = ((parent get-shape) get-last-scale).
	
		plinkPoint::x *= scale::x.
		plinkPoint::y *= scale::y.
		plinkPoint::z *= scale::z.

		self set-parent-link-point to plinkPoint.

	- to rescale-child-link-point:
		% Used internally to rescale link points when joint scaling is enabled.

		scale (vector).

		if !child: return.

		scale = ((child get-shape) get-last-scale).
	
		clinkPoint::x *= scale::x.
		clinkPoint::y *= scale::y.
		clinkPoint::z *= scale::z.

		self set-child-link-point to clinkPoint.

	- to get-joint-pointer:
		% Internal use only.

		return jointPointer.

	- to destroy:
		self break-joint.
}

Joint : PrismaticJoint (aka PrismaticJoints) [version 2.3] {
	% This subclass of OBJECT(Joint) is used to link two OBJECT(Link) objects
	% together using a sliding linear joint.  
	% <P>
	% A retractable TV antenna is an
	% example of an object that uses multiple prismatic joints.
	% <P>
	% <CENTER><IMG SRC="../images/PrismaticJoint.jpg" BORDER=1></CENTER>

	+ to link with-normal theNormal (vector) with-parent-point parentPoint (vector) 
			with-child-point childPoint (vector)
			to-child childLink (object)
			parent parentLink = 0 (object) 
			use-current-relative-rotation currentRotation = 0 (int):

		% Creates a prismatic (sliding) joint between parentLink and childLink.  
		% The joint will be locoated at parentPoint on the parent's body, and at
		% childPoint on the child's body.  The joint will slide along the axis 
		% theNormal.
		% <P>
		% If parentLink is the value 0, then the joint will be attached to a 
		% fixed point in the world, specified with parentPoint.
	
		ppointer, cpointer (pointer).

		if parentLink: ppointer = (parentLink get-link-pointer).
		if childLink: cpointer = (childLink get-link-pointer).

		if parentLink && !ppointer:
			die "attempting to link uninitialized Link object $parentLink.".
		if childLink && !cpointer:
			die "attempting to link uninitialized Link object $childLink.".

		jointPointer = jointLinkPrismatic(ppointer, cpointer, theNormal, parentPoint, childPoint, relativeRotation, currentRotation).

		normalVector = theNormal.
		plinkPoint = parentPoint.
		clinkPoint = childPoint.

		parent = parentLink.
		child = childLink.

		self add-dependency on child.
		self add-dependency on parent.

	+ to set-joint-limits min min1 (double) max max1 (double):
		% Sets the minimum and maximum allowed positions for this 
		% joint. 

		jointSetLimits(jointPointer, (min1, 0, 0), (max1, 0, 0)).

	+ to get-joint-position:
		% Returns a double indicating how far this joint is from its natural
		% position (which corresponds to a value of 0).

		return jointGetPosition(jointPointer)::x.

	+ to set-joint-force to forceValue (double): 
		% Applies a force of forceValue to this joint. 

		jointApplyForce(jointPointer, (forceValue, 0, 0)).

	+ to dearchive:
		if parent || child: 
			self link parent parent to-child child with-normal normalVector 
					with-parent-point plinkPoint with-child-point clinkPoint.

		return (super dearchive).
}

Joint : RevoluteJoint (aka RevoluteJoints) [version 2.3] {
	% This subclass of OBJECT(Joint) is used to link two OBJECT(Link) objects
	% together using a rotating joint.  
	% <P>
	% RevoluteJoints rotate on a single axis, like a hinge.  The knee is another 
	% example of a RevoluteJoint--it can bend back-and-forth, but it cannot twist 
	% or bend side-to-side.
	% <P>
	% <CENTER><IMG SRC="../images/RevoluteJoint.jpg" BORDER=1></CENTER>

	+ to link with-normal theNormal (vector) with-parent-point parentPoint (vector) 
			with-child-point childPoint (vector)
			to-child childLink (object)
			parent parentLink = 0 (object) 
			use-current-relative-rotation currentRotation = 0 (int):

		% Creates a revolute (rotating) joint between parentLink and childLink.  
		% The joint will be lcoated at parentPoint on the parent's body, and at
		% childPoint on the child's body.  The joint will rotate along the axis 
		% theNormal.
		% <P>
		% If parentLink is the value 0, then the joint will be attached to a 
		% fixed point in the world, specified with parentPoint.

		ppointer, cpointer (pointer).

		if parentLink: ppointer = (parentLink get-link-pointer).
		if childLink: cpointer = (childLink get-link-pointer).

		if parentLink && !ppointer:
			die "attempting to link uninitialized Link object $parentLink.".
		if childLink && !cpointer:
			die "attempting to link uninitialized Link object $childLink.".

		if jointPointer:
			die "attempt to link previously linked Joint object.".

		jointPointer = jointLinkRevolute(ppointer, cpointer, theNormal, parentPoint, childPoint, relativeRotation, currentRotation).

		normalVector = theNormal.
		plinkPoint = parentPoint.
		clinkPoint = childPoint.

		parent = parentLink.
		child = childLink.

		self add-dependency on child.
		self add-dependency on parent.

	+ to set-joint-torque to torqueValue (double): 
		% Applies a torque of torqueValue to the revolute joint. 

		jointApplyForce(jointPointer, (torqueValue, 0, 0)).

	- to get-joint-position:
		return (self get-joint-angle).

	+ to get-joint-angle:
		% Returns a double indicating how the angle of this joint from its natural
		% position (which corresponds to a value of 0).

		return jointGetPosition(jointPointer)::x.

	+ to set-joint-limits min min1 (double) max max1 (double):
		% Sets the minimum and maximum allowed rotations (in radians) 
		% for this joint. 

		jointSetLimits(jointPointer, (min1, 0, 0), (max1, 0, 0)).

	+ to dearchive:
		if parent || child:
			self link with-normal normalVector 
				with-parent-point plinkPoint with-child-point clinkPoint to-child child parent parent.

		return (super dearchive).
}

Joint : FixedJoint (aka FixedJoints) [version 2.3] {
	% This subclass of OBJECT(Joint) is used to link two OBJECT(Link) objects
	% together using a static, or fixed, joint.
	% <P>
	% <CENTER><IMG SRC="../images/FixedJoint.jpg" BORDER=1></CENTER>
	% <P>
	% <b>Fixed joints do not currently support a relative rotation the way
	% other joint types do.</b>  I'm so sorry.  

	+ to link with-parent-point parentPoint (vector) 
			with-child-point childPoint (vector)
			to-child childLink (object)
			parent parentLink = 0 (object) 
			use-current-relative-rotation currentRotation = 0 (int):

		% Creates a fixed joint between parentLink and childLink.  
		% The joint will be located at parentPoint on the parent's body, and at
		% childPoint on the child's body.  
		% <P>
		% Unfortunately, FixedJoints do not use the relative joint orientation
		% that can be set in OBJECT(Joint).  This means that the rotation of the 
		% child is always the same as the rotation of the parent.
		% <P>
		% If parentLink is the value 0, then the joint will be attached to a 
		% fixed point in the world, specified with parentPoint.

		ppointer, cpointer (pointer).

		if parentLink: ppointer = (parentLink get-link-pointer).
		if childLink: cpointer = (childLink get-link-pointer).

		if parentLink && !ppointer:
			die "attempting to link uninitialized Link object $parentLink.".
		if childLink && !cpointer:
			die "attempting to link uninitialized Link object $childLink.".

		jointPointer = jointLinkStatic(ppointer, cpointer, (0, 0, 0), parentPoint, childPoint, relativeRotation, currentRotation).

		normalVector = (1, 0, 0).
		plinkPoint = parentPoint.
		clinkPoint = childPoint.

		parent = parentLink.
		child = childLink.

		self add-dependency on child.
		self add-dependency on parent.

	+ to dearchive:
		if parent || child: 
			self link with-parent-point plinkPoint with-child-point clinkPoint to-child child parent parent.

		return (super dearchive).
}

Joint : UniversalJoint (aka UniversalJoints) [version 2.3] {
	% This subclass of OBJECT(Joint) is used to link two OBJECT(Link) objects
	% together using a universal joint.  
	% <P>
	% A universal joint has two degrees of
	% freedom.  It can rotate "up-and-down" and "side-to-side", but cannot 
	% "twist".  Your wrist is basically a universal joint--your hand cannot
	% rotate without the rest of your arm.
	% <P>
	% <CENTER><IMG SRC="../images/UniversalJoint.jpg" BORDER=1></CENTER>

	+ to link with-normal normal (vector)
			with-parent-point parentPoint (vector) 
			with-child-point childPoint (vector)
			to-child childLink (object)
			parent parentLink = 0 (object)
			use-current-relative-rotation currentRotation = 0 (int):

		% Creates a universal (rotation on two axes) joint between parentLink and childLink.  
		% The joint will be lcoated at parentPoint on the parent's body, and at
		% childPoint on the child's body.  
		% <P>
		% Universal joints have two rotation axes, both of which are perpendicular to the 
		% parentPoint.  Think about the forearm linking to the hand at the wrist--the axes
		% of rotation of the wrist are both perpendicular to the line from the center of the
		% forearm (which represents the parentPoint).  The normalVector specifies <i>one</i>
		% of the rotation axes, while the other is calculated automatically (perpendicular to 
		% both parentPoint and normalVector).
		% <P>
		% If parentLink is the value 0, then the joint will be attached to a 
		% fixed point in the world, specified with parentPoint.

		ppointer, cpointer (pointer).

		if parentLink: ppointer = (parentLink get-link-pointer).
		if childLink: cpointer = (childLink get-link-pointer).

		if parentLink && !ppointer:
			die "attempting to link uninitialized Link object $parentLink.".
		if childLink && !cpointer:
			die "attempting to link uninitialized Link object $childLink.".

		if jointPointer:
			die "attempt to link previously linked Joint object.".

		jointPointer = jointLinkUniversal(ppointer, cpointer, normal, parentPoint, childPoint, relativeRotation, currentRotation).

		normalVector = normal.
		plinkPoint = parentPoint.
		clinkPoint = childPoint.

		parent = parentLink.
		child = childLink.

		self add-dependency on child.
		self add-dependency on parent.

	+ to get-joint-angles:
		% Returns a vector indicating how the angle of this joint is from its natural
		% position (which corresponds to a values of 0 on both axes).  Only the X-
		% and Y- components of the vector are valid for UniversalJoints.

		return jointGetPosition(jointPointer).

	+ to set-joint-limits a1-min min1 (double) a1-max max1 (double)
		a2-min min2 (double) a2-max max2 (double):
		% Sets the minimum and maximum allowed rotations (in radians) 
		% for this joint on both of the joint's axes.  

		jointSetLimits(jointPointer, (min1, min2, 0), (max1, max2, 0)).


	+ to set-joint-velocity axis-1 a1velocity (double) axis-2 a2velocity (double): 
		% Sets the desired joint velocity on axis-1 to a1velocity and on axis-2
		% to a2velocity.

		if jointPointer: jointSetVelocity(jointPointer, (a1velocity, a2velocity, 0)).

	+ to dearchive:
		if parent || child: 
			self link parent parent to-child child with-normal normalVector 
					with-parent-point plinkPoint with-child-point clinkPoint.

		return (super dearchive).
}

Joint : BallJoint (aka BallJoints) [version 2.3] {
	% This subclass of OBJECT(Joint) is used to link two OBJECT(Link) objects
	% together using a ball joint.
	% <p>
	% A BallJoint has three degrees of
	% freedom.  It can tilt "up-and-down" and "side-to-side", and can
	% "twist".  Your neck is basically a ball joint--your head tilt 
	% up-and-down, side-to-side, and can twist (although not all the 
	% way around--if your head turns all the way around, please consult 
	% the user manual for repair).
	% <P>
	% <CENTER><IMG SRC="../images/BallJoint.jpg" BORDER=1></CENTER>
	% <P>
	% This joint uses a scheme of 3 Euler angles to represent the 
	% relative rotation between two objects.  The Z-axis of rotation is automatically 
	% derived from the parent link point, meaning that the Z-axis rotation is always 
	% a "twist" relative to the link point.  The X-axis of rotation is specified by 
	% the user with the normal argument.  The Y-axis is automatically derived from the 
	% other two.
	% <P>
	% Because of a limitation of the physics engine, the Y-axis rotation is limited 
	% to a range of approximately +/- 80 degrees of rotation.
	% <P>
	% If versions of breve prior to 2.3, there was no normal argument because the 
	% axes of rotation were automatically defined.  The argument is therefore optional
	% for backwards compatibility <b>only</b>, and should <b>always</b> be specified
	% when writing new code.

	+ to link with-parent-point parentPoint (vector) 
			with-child-point childPoint (vector)
			to-child childLink (object)
			parent parentLink = 0 (object) 
			with-normal normal = (1, 0, 0) (vector)
			use-current-relative-rotation currentRotation = 0 (int):

		% Creates a ball (rotation on three axes) joint between parentLink and childLink.  
		% The joint will be lcoated at parentPoint on the parent's body, and at
		% childPoint on the child's body.  
		% <P>
		% If parentLink is the value 0, then the joint will be attached to a 
		% fixed point in the world, specified with parentPoint.

		ppointer, cpointer (pointer).

		if parentLink: ppointer = (parentLink get-link-pointer).
		if childLink: cpointer = (childLink get-link-pointer).

		if childLink && !cpointer:
			die "attempting to link uninitialized Link object $childLink.".

		if jointPointer:
			die "attempt to link previously linked Joint object.".

		jointPointer = jointLinkBall(ppointer, cpointer, normal, parentPoint, childPoint, relativeRotation, currentRotation).

		normalVector = normal.
		plinkPoint = parentPoint.
		clinkPoint = childPoint.

		parent = parentLink.
		child = childLink.

		self add-dependency on child.
		self add-dependency on parent.

	+ to get-joint-angles:
		% Returns a vector indicating how the angle of this joint is from its natural
		% position (which corresponds to a values of 0 on all axes).  

		return jointGetPosition(jointPointer).

	+ to set-joint-velocity to rotationalVelocity (vector): 
		% Sets the desired joint velocity to rotationalVelocity.  As a ball joint
		% allows rotation on three axes, rotationalVelocity is a vector.

		if jointPointer: jointSetVelocity(jointPointer, rotationalVelocity).

	+ to set-joint-limits a1-min min1 (double) a1-max max1 (double)
		a2-min min2 (double) a2-max max2 (double)
		a3-min min3 (double) a3-max max3 (double):
		% Sets the minimum and maximum allowed rotations (in radians) 
		% for this joint on all three of the joint's axes.  

		if jointPointer: jointSetLimits(jointPointer, (min1, min2, min3), (max1, max2, max3)).

	+ to dearchive:
		if parent || child: 
			self link parent parent to-child child 
				with-parent-point plinkPoint with-child-point clinkPoint.

		return (super dearchive).
}

